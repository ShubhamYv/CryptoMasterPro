From c0a9046c368d597cba901187f8e11f7f4c12b464 Mon Sep 17 00:00:00 2001
From: ShubhamYv <shubhamyadav32100@gmail.com>
Date: Fri, 21 Jun 2024 18:02:07 +0530
Subject: [PATCH] Initial commit with developed code including JWT
 authentication

---
 .gitignore                                    |  33 +++
 .mvn/wrapper/maven-wrapper.properties         |  19 ++
 mvnw                                          | 259 ++++++++++++++++++
 mvnw.cmd                                      | 149 ++++++++++
 pom.xml                                       | 117 ++++++++
 .../com/trading/TradingAppApplication.java    |  14 +
 .../com/trading/config/ModelMapperConfig.java |  14 +
 .../com/trading/config/SecurityConfig.java    |  67 +++++
 .../com/trading/constants/JwtConstant.java    |   7 +
 .../trading/controller/AuthController.java    |  94 +++++++
 .../java/com/trading/domain/UserRole.java     |   6 +
 .../com/trading/domain/VerificationType.java  |   6 +
 .../java/com/trading/modal/TwoFactorAuth.java |  11 +
 src/main/java/com/trading/modal/User.java     |  37 +++
 .../trading/pojo/request/LoginRequest.java    |   9 +
 .../com/trading/pojo/request/UserRequest.java |  11 +
 .../trading/pojo/response/AuthResponse.java   |  14 +
 .../trading/repository/UserRepository.java    |  10 +
 .../com/trading/security/JwtProvider.java     |  52 ++++
 .../trading/security/JwtTokenValidator.java   |  69 +++++
 .../service/CustomUserDetailsService.java     |   7 +
 .../impl/CustomUserDetailsServiceImpl.java    |  36 +++
 src/main/resources/application.properties     |  17 ++
 .../trading/TradingAppApplicationTests.java   |  13 +
 24 files changed, 1071 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 .mvn/wrapper/maven-wrapper.properties
 create mode 100644 mvnw
 create mode 100644 mvnw.cmd
 create mode 100644 pom.xml
 create mode 100644 src/main/java/com/trading/TradingAppApplication.java
 create mode 100644 src/main/java/com/trading/config/ModelMapperConfig.java
 create mode 100644 src/main/java/com/trading/config/SecurityConfig.java
 create mode 100644 src/main/java/com/trading/constants/JwtConstant.java
 create mode 100644 src/main/java/com/trading/controller/AuthController.java
 create mode 100644 src/main/java/com/trading/domain/UserRole.java
 create mode 100644 src/main/java/com/trading/domain/VerificationType.java
 create mode 100644 src/main/java/com/trading/modal/TwoFactorAuth.java
 create mode 100644 src/main/java/com/trading/modal/User.java
 create mode 100644 src/main/java/com/trading/pojo/request/LoginRequest.java
 create mode 100644 src/main/java/com/trading/pojo/request/UserRequest.java
 create mode 100644 src/main/java/com/trading/pojo/response/AuthResponse.java
 create mode 100644 src/main/java/com/trading/repository/UserRepository.java
 create mode 100644 src/main/java/com/trading/security/JwtProvider.java
 create mode 100644 src/main/java/com/trading/security/JwtTokenValidator.java
 create mode 100644 src/main/java/com/trading/service/CustomUserDetailsService.java
 create mode 100644 src/main/java/com/trading/service/impl/CustomUserDetailsServiceImpl.java
 create mode 100644 src/main/resources/application.properties
 create mode 100644 src/test/java/com/trading/TradingAppApplicationTests.java

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..549e00a
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,33 @@
+HELP.md
+target/
+!.mvn/wrapper/maven-wrapper.jar
+!**/src/main/**/target/
+!**/src/test/**/target/
+
+### STS ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+
+### IntelliJ IDEA ###
+.idea
+*.iws
+*.iml
+*.ipr
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+build/
+!**/src/main/**/build/
+!**/src/test/**/build/
+
+### VS Code ###
+.vscode/
diff --git a/.mvn/wrapper/maven-wrapper.properties b/.mvn/wrapper/maven-wrapper.properties
new file mode 100644
index 0000000..8f96f52
--- /dev/null
+++ b/.mvn/wrapper/maven-wrapper.properties
@@ -0,0 +1,19 @@
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#   https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+wrapperVersion=3.3.2
+distributionType=only-script
+distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.7/apache-maven-3.9.7-bin.zip
diff --git a/mvnw b/mvnw
new file mode 100644
index 0000000..d7c358e
--- /dev/null
+++ b/mvnw
@@ -0,0 +1,259 @@
+#!/bin/sh
+# ----------------------------------------------------------------------------
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#    https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+# ----------------------------------------------------------------------------
+
+# ----------------------------------------------------------------------------
+# Apache Maven Wrapper startup batch script, version 3.3.2
+#
+# Optional ENV vars
+# -----------------
+#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
+#   MVNW_REPOURL - repo url base for downloading maven distribution
+#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
+#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
+# ----------------------------------------------------------------------------
+
+set -euf
+[ "${MVNW_VERBOSE-}" != debug ] || set -x
+
+# OS specific support.
+native_path() { printf %s\\n "$1"; }
+case "$(uname)" in
+CYGWIN* | MINGW*)
+  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
+  native_path() { cygpath --path --windows "$1"; }
+  ;;
+esac
+
+# set JAVACMD and JAVACCMD
+set_java_home() {
+  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
+  if [ -n "${JAVA_HOME-}" ]; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
+      # IBM's JDK on AIX uses strange locations for the executables
+      JAVACMD="$JAVA_HOME/jre/sh/java"
+      JAVACCMD="$JAVA_HOME/jre/sh/javac"
+    else
+      JAVACMD="$JAVA_HOME/bin/java"
+      JAVACCMD="$JAVA_HOME/bin/javac"
+
+      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
+        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
+        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
+        return 1
+      fi
+    fi
+  else
+    JAVACMD="$(
+      'set' +e
+      'unset' -f command 2>/dev/null
+      'command' -v java
+    )" || :
+    JAVACCMD="$(
+      'set' +e
+      'unset' -f command 2>/dev/null
+      'command' -v javac
+    )" || :
+
+    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
+      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
+      return 1
+    fi
+  fi
+}
+
+# hash string like Java String::hashCode
+hash_string() {
+  str="${1:-}" h=0
+  while [ -n "$str" ]; do
+    char="${str%"${str#?}"}"
+    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
+    str="${str#?}"
+  done
+  printf %x\\n $h
+}
+
+verbose() { :; }
+[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }
+
+die() {
+  printf %s\\n "$1" >&2
+  exit 1
+}
+
+trim() {
+  # MWRAPPER-139:
+  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
+  #   Needed for removing poorly interpreted newline sequences when running in more
+  #   exotic environments such as mingw bash on Windows.
+  printf "%s" "${1}" | tr -d '[:space:]'
+}
+
+# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
+while IFS="=" read -r key value; do
+  case "${key-}" in
+  distributionUrl) distributionUrl=$(trim "${value-}") ;;
+  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
+  esac
+done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
+[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"
+
+case "${distributionUrl##*/}" in
+maven-mvnd-*bin.*)
+  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
+  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
+  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
+  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
+  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
+  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
+  *)
+    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
+    distributionPlatform=linux-amd64
+    ;;
+  esac
+  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
+  ;;
+maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
+*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
+esac
+
+# apply MVNW_REPOURL and calculate MAVEN_HOME
+# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
+[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
+distributionUrlName="${distributionUrl##*/}"
+distributionUrlNameMain="${distributionUrlName%.*}"
+distributionUrlNameMain="${distributionUrlNameMain%-bin}"
+MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
+MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"
+
+exec_maven() {
+  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
+  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
+}
+
+if [ -d "$MAVEN_HOME" ]; then
+  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
+  exec_maven "$@"
+fi
+
+case "${distributionUrl-}" in
+*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
+*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
+esac
+
+# prepare tmp dir
+if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
+  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
+  trap clean HUP INT TERM EXIT
+else
+  die "cannot create temp dir"
+fi
+
+mkdir -p -- "${MAVEN_HOME%/*}"
+
+# Download and Install Apache Maven
+verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
+verbose "Downloading from: $distributionUrl"
+verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"
+
+# select .zip or .tar.gz
+if ! command -v unzip >/dev/null; then
+  distributionUrl="${distributionUrl%.zip}.tar.gz"
+  distributionUrlName="${distributionUrl##*/}"
+fi
+
+# verbose opt
+__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
+[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v
+
+# normalize http auth
+case "${MVNW_PASSWORD:+has-password}" in
+'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
+has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
+esac
+
+if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
+  verbose "Found wget ... using wget"
+  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
+elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
+  verbose "Found curl ... using curl"
+  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
+elif set_java_home; then
+  verbose "Falling back to use Java to download"
+  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
+  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
+  cat >"$javaSource" <<-END
+	public class Downloader extends java.net.Authenticator
+	{
+	  protected java.net.PasswordAuthentication getPasswordAuthentication()
+	  {
+	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
+	  }
+	  public static void main( String[] args ) throws Exception
+	  {
+	    setDefault( new Downloader() );
+	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
+	  }
+	}
+	END
+  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
+  verbose " - Compiling Downloader.java ..."
+  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
+  verbose " - Running Downloader.java ..."
+  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
+fi
+
+# If specified, validate the SHA-256 sum of the Maven distribution zip file
+if [ -n "${distributionSha256Sum-}" ]; then
+  distributionSha256Result=false
+  if [ "$MVN_CMD" = mvnd.sh ]; then
+    echo "Checksum validation is not supported for maven-mvnd." >&2
+    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
+    exit 1
+  elif command -v sha256sum >/dev/null; then
+    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
+      distributionSha256Result=true
+    fi
+  elif command -v shasum >/dev/null; then
+    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
+      distributionSha256Result=true
+    fi
+  else
+    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
+    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
+    exit 1
+  fi
+  if [ $distributionSha256Result = false ]; then
+    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
+    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
+    exit 1
+  fi
+fi
+
+# unzip and move
+if command -v unzip >/dev/null; then
+  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
+else
+  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
+fi
+printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
+mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"
+
+clean || :
+exec_maven "$@"
diff --git a/mvnw.cmd b/mvnw.cmd
new file mode 100644
index 0000000..6f779cf
--- /dev/null
+++ b/mvnw.cmd
@@ -0,0 +1,149 @@
+<# : batch portion
+@REM ----------------------------------------------------------------------------
+@REM Licensed to the Apache Software Foundation (ASF) under one
+@REM or more contributor license agreements.  See the NOTICE file
+@REM distributed with this work for additional information
+@REM regarding copyright ownership.  The ASF licenses this file
+@REM to you under the Apache License, Version 2.0 (the
+@REM "License"); you may not use this file except in compliance
+@REM with the License.  You may obtain a copy of the License at
+@REM
+@REM    https://www.apache.org/licenses/LICENSE-2.0
+@REM
+@REM Unless required by applicable law or agreed to in writing,
+@REM software distributed under the License is distributed on an
+@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+@REM KIND, either express or implied.  See the License for the
+@REM specific language governing permissions and limitations
+@REM under the License.
+@REM ----------------------------------------------------------------------------
+
+@REM ----------------------------------------------------------------------------
+@REM Apache Maven Wrapper startup batch script, version 3.3.2
+@REM
+@REM Optional ENV vars
+@REM   MVNW_REPOURL - repo url base for downloading maven distribution
+@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
+@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
+@REM ----------------------------------------------------------------------------
+
+@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
+@SET __MVNW_CMD__=
+@SET __MVNW_ERROR__=
+@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
+@SET PSModulePath=
+@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
+  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
+)
+@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
+@SET __MVNW_PSMODULEP_SAVE=
+@SET __MVNW_ARG0_NAME__=
+@SET MVNW_USERNAME=
+@SET MVNW_PASSWORD=
+@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
+@echo Cannot start maven from wrapper >&2 && exit /b 1
+@GOTO :EOF
+: end batch / begin powershell #>
+
+$ErrorActionPreference = "Stop"
+if ($env:MVNW_VERBOSE -eq "true") {
+  $VerbosePreference = "Continue"
+}
+
+# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
+$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
+if (!$distributionUrl) {
+  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
+}
+
+switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
+  "maven-mvnd-*" {
+    $USE_MVND = $true
+    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
+    $MVN_CMD = "mvnd.cmd"
+    break
+  }
+  default {
+    $USE_MVND = $false
+    $MVN_CMD = $script -replace '^mvnw','mvn'
+    break
+  }
+}
+
+# apply MVNW_REPOURL and calculate MAVEN_HOME
+# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
+if ($env:MVNW_REPOURL) {
+  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
+  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
+}
+$distributionUrlName = $distributionUrl -replace '^.*/',''
+$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
+$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
+if ($env:MAVEN_USER_HOME) {
+  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
+}
+$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
+$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"
+
+if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
+  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
+  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
+  exit $?
+}
+
+if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
+  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
+}
+
+# prepare tmp dir
+$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
+$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
+$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
+trap {
+  if ($TMP_DOWNLOAD_DIR.Exists) {
+    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
+    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
+  }
+}
+
+New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null
+
+# Download and Install Apache Maven
+Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
+Write-Verbose "Downloading from: $distributionUrl"
+Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"
+
+$webclient = New-Object System.Net.WebClient
+if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
+  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
+}
+[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
+$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null
+
+# If specified, validate the SHA-256 sum of the Maven distribution zip file
+$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
+if ($distributionSha256Sum) {
+  if ($USE_MVND) {
+    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
+  }
+  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
+  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
+    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
+  }
+}
+
+# unzip and move
+Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
+Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
+try {
+  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
+} catch {
+  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
+    Write-Error "fail to move MAVEN_HOME"
+  }
+} finally {
+  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
+  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
+}
+
+Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
diff --git a/pom.xml b/pom.xml
new file mode 100644
index 0000000..9cbe6b9
--- /dev/null
+++ b/pom.xml
@@ -0,0 +1,117 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
+	<modelVersion>4.0.0</modelVersion>
+	<parent>
+		<groupId>org.springframework.boot</groupId>
+		<artifactId>spring-boot-starter-parent</artifactId>
+		<version>3.3.0</version>
+		<relativePath /> <!-- lookup parent from repository -->
+	</parent>
+	<groupId>com.trading</groupId>
+	<artifactId>trading-app</artifactId>
+	<version>0.0.1-SNAPSHOT</version>
+	<name>trading-app</name>
+	<description>user can trade on crypto</description>
+	<url />
+	<licenses>
+		<license />
+	</licenses>
+	<developers>
+		<developer />
+	</developers>
+	<scm>
+		<connection />
+		<developerConnection />
+		<tag />
+		<url />
+	</scm>
+	<properties>
+		<java.version>17</java.version>
+	</properties>
+	<dependencies>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-data-jpa</artifactId>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-security</artifactId>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-web</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-devtools</artifactId>
+			<scope>runtime</scope>
+			<optional>true</optional>
+		</dependency>
+		<dependency>
+			<groupId>com.mysql</groupId>
+			<artifactId>mysql-connector-j</artifactId>
+			<scope>runtime</scope>
+		</dependency>
+		<dependency>
+			<groupId>org.projectlombok</groupId>
+			<artifactId>lombok</artifactId>
+			<optional>true</optional>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-test</artifactId>
+			<scope>test</scope>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.security</groupId>
+			<artifactId>spring-security-test</artifactId>
+			<scope>test</scope>
+		</dependency>
+
+		<dependency>
+			<groupId>io.jsonwebtoken</groupId>
+			<artifactId>jjwt-api</artifactId>
+			<version>0.11.1</version>
+		</dependency>
+
+		<dependency>
+			<groupId>io.jsonwebtoken</groupId>
+			<artifactId>jjwt-impl</artifactId>
+			<version>0.11.1</version>
+			<scope>runtime</scope>
+		</dependency>
+
+		<dependency>
+			<groupId>io.jsonwebtoken</groupId>
+			<artifactId>jjwt-jackson</artifactId>
+			<version>0.11.1</version>
+			<scope>runtime</scope>
+		</dependency>
+		<dependency>
+			<groupId>org.modelmapper</groupId>
+			<artifactId>modelmapper</artifactId>
+			<version>3.1.1</version>
+		</dependency>
+	</dependencies>
+
+	<build>
+		<plugins>
+			<plugin>
+				<groupId>org.springframework.boot</groupId>
+				<artifactId>spring-boot-maven-plugin</artifactId>
+				<configuration>
+					<excludes>
+						<exclude>
+							<groupId>org.projectlombok</groupId>
+							<artifactId>lombok</artifactId>
+						</exclude>
+					</excludes>
+				</configuration>
+			</plugin>
+		</plugins>
+	</build>
+
+</project>
diff --git a/src/main/java/com/trading/TradingAppApplication.java b/src/main/java/com/trading/TradingAppApplication.java
new file mode 100644
index 0000000..01046ee
--- /dev/null
+++ b/src/main/java/com/trading/TradingAppApplication.java
@@ -0,0 +1,14 @@
+package com.trading;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+
+@SpringBootApplication
+public class TradingAppApplication {
+
+	public static void main(String[] args) {
+		SpringApplication.run(TradingAppApplication.class, args);
+		System.out.println("App Running...");
+	}
+
+}
diff --git a/src/main/java/com/trading/config/ModelMapperConfig.java b/src/main/java/com/trading/config/ModelMapperConfig.java
new file mode 100644
index 0000000..6361f40
--- /dev/null
+++ b/src/main/java/com/trading/config/ModelMapperConfig.java
@@ -0,0 +1,14 @@
+package com.trading.config;
+
+import org.modelmapper.ModelMapper;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+@Configuration
+public class ModelMapperConfig {
+
+	@Bean
+	ModelMapper modelMapper() {
+		return new ModelMapper();
+	}
+}
diff --git a/src/main/java/com/trading/config/SecurityConfig.java b/src/main/java/com/trading/config/SecurityConfig.java
new file mode 100644
index 0000000..a9f8aaa
--- /dev/null
+++ b/src/main/java/com/trading/config/SecurityConfig.java
@@ -0,0 +1,67 @@
+package com.trading.config;
+
+import java.util.Arrays;
+import java.util.Collections;
+
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.security.config.annotation.web.builders.HttpSecurity;
+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
+import org.springframework.security.config.http.SessionCreationPolicy;
+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
+import org.springframework.security.crypto.password.PasswordEncoder;
+import org.springframework.security.web.SecurityFilterChain;
+import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;
+import org.springframework.web.cors.CorsConfiguration;
+import org.springframework.web.cors.CorsConfigurationSource;
+
+import com.trading.security.JwtTokenValidator;
+
+import jakarta.servlet.http.HttpServletRequest;
+
+@Configuration
+@EnableWebSecurity
+public class SecurityConfig {
+
+	@Bean
+	SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
+		http.sessionManagement(
+				mgmt -> mgmt.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
+				.authorizeHttpRequests(
+						auth -> auth.requestMatchers("/api/**")
+						.authenticated()
+						.anyRequest()
+						.permitAll())
+				.addFilterBefore(new JwtTokenValidator(), BasicAuthenticationFilter.class)
+				.csrf(csrf -> csrf.disable())
+				.cors(cors -> cors.configurationSource(corsConfigurationSource()));
+		return http.build();
+	}
+
+	private CorsConfigurationSource corsConfigurationSource() {
+		return new CorsConfigurationSource() {
+			
+			@Override
+			public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {
+				CorsConfiguration cfg = new CorsConfiguration();
+				cfg.setAllowedOrigins(Arrays.asList(
+						"http://localhost:3000",
+						"http://localhost:5137",
+						"http://localhost:4200"
+						));
+				cfg.setAllowedMethods(Collections.singletonList("*"));
+				cfg.setAllowCredentials(true);
+				cfg.setAllowedHeaders(Collections.singletonList("*"));
+				cfg.setExposedHeaders(Arrays.asList("Authorization"));
+				cfg.setMaxAge(3600l);
+				return cfg;
+			}
+		};
+	}
+	
+	
+	@Bean
+	PasswordEncoder passwordEncoder() {
+		return new BCryptPasswordEncoder();
+	}
+}
diff --git a/src/main/java/com/trading/constants/JwtConstant.java b/src/main/java/com/trading/constants/JwtConstant.java
new file mode 100644
index 0000000..52b4642
--- /dev/null
+++ b/src/main/java/com/trading/constants/JwtConstant.java
@@ -0,0 +1,7 @@
+package com.trading.constants;
+
+public class JwtConstant {
+	
+	public static final String SECRET_KEY ="aesrdtfyguio09876r5edfcoi9876reesdxcv bi7rtdrf vnbniyftc";
+	public static final String JWT_HEADER = "Authorization";
+}
diff --git a/src/main/java/com/trading/controller/AuthController.java b/src/main/java/com/trading/controller/AuthController.java
new file mode 100644
index 0000000..42cde3a
--- /dev/null
+++ b/src/main/java/com/trading/controller/AuthController.java
@@ -0,0 +1,94 @@
+package com.trading.controller;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
+import org.springframework.security.core.Authentication;
+import org.springframework.security.core.context.SecurityContextHolder;
+import org.springframework.security.core.userdetails.UserDetails;
+import org.springframework.security.crypto.password.PasswordEncoder;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+import com.trading.modal.User;
+import com.trading.pojo.request.LoginRequest;
+import com.trading.pojo.request.UserRequest;
+import com.trading.pojo.response.AuthResponse;
+import com.trading.repository.UserRepository;
+import com.trading.security.JwtProvider;
+import com.trading.service.CustomUserDetailsService;
+
+@RestController
+@RequestMapping("/auth")
+public class AuthController {
+
+	@Autowired
+	private UserRepository userRepository;
+	
+	@Autowired
+	private CustomUserDetailsService customUserDetailsService;
+	
+	@Autowired
+	private PasswordEncoder passwordEncoder;
+
+	@PostMapping("/signup")
+	public ResponseEntity<AuthResponse> register(@RequestBody UserRequest request) throws Exception {
+		User isEmailExist = userRepository.findByEmail(request.getEmail());
+		if (null != isEmailExist) {
+			throw new Exception("Email is already used with another account");
+		}
+
+		User user = new User();
+		user.setEmail(request.getEmail());
+		user.setFullName(request.getFullName());
+		user.setMobile(request.getMobile());
+		user.setPassword(passwordEncoder.encode(request.getPassword()));
+		
+		User savedUser = userRepository.save(user);
+		
+
+		Authentication authentication = new UsernamePasswordAuthenticationToken(
+				user.getEmail(), 
+				user.getPassword());
+		SecurityContextHolder.getContext().setAuthentication(authentication);
+		
+		String jwt = JwtProvider.generateToken(authentication);
+
+		AuthResponse authResponse = AuthResponse.builder()
+				.jwt(jwt)
+				.message("Signup Successful")
+				.status(true)
+				.build();
+		
+		return new ResponseEntity<>(authResponse, HttpStatus.CREATED);
+	}
+	
+	
+	@PostMapping("/signin")
+	public ResponseEntity<AuthResponse> signin(@RequestBody LoginRequest loginRequest) throws Exception {
+		String username = loginRequest.getEmail();
+		String password = loginRequest.getPassword();
+		Authentication authentication = authenticate(username, password);
+		SecurityContextHolder.getContext().setAuthentication(authentication);
+
+		String jwt = JwtProvider.generateToken(authentication);
+
+		AuthResponse authResponse = AuthResponse.builder()
+				.jwt(jwt)
+				.message("SignIn Successful")
+				.build();
+		return new ResponseEntity<>(authResponse, HttpStatus.OK);
+	}
+	
+	private Authentication authenticate(String username, String password) throws Exception {
+		UserDetails userDetails = customUserDetailsService.loadUserByUsername(username);
+		if (userDetails == null 
+				|| !passwordEncoder.matches(password, userDetails.getPassword())) {
+			throw new Exception("Invalid Credential");
+		}
+		return new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());
+	}
+}
diff --git a/src/main/java/com/trading/domain/UserRole.java b/src/main/java/com/trading/domain/UserRole.java
new file mode 100644
index 0000000..1e5b00a
--- /dev/null
+++ b/src/main/java/com/trading/domain/UserRole.java
@@ -0,0 +1,6 @@
+package com.trading.domain;
+
+public enum UserRole {
+
+	ROLE_ADMIN, ROLE_CUSTOMER;
+}
diff --git a/src/main/java/com/trading/domain/VerificationType.java b/src/main/java/com/trading/domain/VerificationType.java
new file mode 100644
index 0000000..8476e58
--- /dev/null
+++ b/src/main/java/com/trading/domain/VerificationType.java
@@ -0,0 +1,6 @@
+package com.trading.domain;
+
+public enum VerificationType {
+
+	MOBILE, EMAIL;
+}
diff --git a/src/main/java/com/trading/modal/TwoFactorAuth.java b/src/main/java/com/trading/modal/TwoFactorAuth.java
new file mode 100644
index 0000000..d63994c
--- /dev/null
+++ b/src/main/java/com/trading/modal/TwoFactorAuth.java
@@ -0,0 +1,11 @@
+package com.trading.modal;
+
+import com.trading.domain.VerificationType;
+
+import lombok.Data;
+
+@Data
+public class TwoFactorAuth {
+	private boolean isEnabled = false;
+	private VerificationType sendTo;
+}
diff --git a/src/main/java/com/trading/modal/User.java b/src/main/java/com/trading/modal/User.java
new file mode 100644
index 0000000..2a9e217
--- /dev/null
+++ b/src/main/java/com/trading/modal/User.java
@@ -0,0 +1,37 @@
+package com.trading.modal;
+
+import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.annotation.JsonProperty.Access;
+import com.trading.domain.UserRole;
+
+import jakarta.persistence.Embedded;
+import jakarta.persistence.Entity;
+import jakarta.persistence.GeneratedValue;
+import jakarta.persistence.GenerationType;
+import jakarta.persistence.Id;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Entity
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+public class User {
+
+	@Id
+	@GeneratedValue(strategy = GenerationType.IDENTITY)
+	private Long id;
+
+	private String fullName;
+	private String email;
+	private String mobile;
+
+	@JsonProperty(access = Access.WRITE_ONLY)
+	private String password;
+
+	private UserRole role = UserRole.ROLE_CUSTOMER;
+
+	@Embedded
+	private TwoFactorAuth twoFactorAuth = new TwoFactorAuth();
+}
diff --git a/src/main/java/com/trading/pojo/request/LoginRequest.java b/src/main/java/com/trading/pojo/request/LoginRequest.java
new file mode 100644
index 0000000..11776ae
--- /dev/null
+++ b/src/main/java/com/trading/pojo/request/LoginRequest.java
@@ -0,0 +1,9 @@
+package com.trading.pojo.request;
+
+import lombok.Data;
+
+@Data
+public class LoginRequest {
+	private String email;
+	private String password;
+}
diff --git a/src/main/java/com/trading/pojo/request/UserRequest.java b/src/main/java/com/trading/pojo/request/UserRequest.java
new file mode 100644
index 0000000..c44dd17
--- /dev/null
+++ b/src/main/java/com/trading/pojo/request/UserRequest.java
@@ -0,0 +1,11 @@
+package com.trading.pojo.request;
+
+import lombok.Data;
+
+@Data
+public class UserRequest {
+	private String fullName;
+	private String email;
+	private String password;
+	private String mobile;
+}
diff --git a/src/main/java/com/trading/pojo/response/AuthResponse.java b/src/main/java/com/trading/pojo/response/AuthResponse.java
new file mode 100644
index 0000000..fc50a2b
--- /dev/null
+++ b/src/main/java/com/trading/pojo/response/AuthResponse.java
@@ -0,0 +1,14 @@
+package com.trading.pojo.response;
+
+import lombok.Builder;
+import lombok.Data;
+
+@Data
+@Builder
+public class AuthResponse {
+	private String jwt;
+	private String message;
+	private boolean status;
+	private boolean isTwoFactorAuthEnabled;
+	private String session;
+}
diff --git a/src/main/java/com/trading/repository/UserRepository.java b/src/main/java/com/trading/repository/UserRepository.java
new file mode 100644
index 0000000..1af04c9
--- /dev/null
+++ b/src/main/java/com/trading/repository/UserRepository.java
@@ -0,0 +1,10 @@
+package com.trading.repository;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+
+import com.trading.modal.User;
+
+public interface UserRepository extends JpaRepository<User, Long> {
+
+	User findByEmail(String email);
+}
diff --git a/src/main/java/com/trading/security/JwtProvider.java b/src/main/java/com/trading/security/JwtProvider.java
new file mode 100644
index 0000000..5bfbab6
--- /dev/null
+++ b/src/main/java/com/trading/security/JwtProvider.java
@@ -0,0 +1,52 @@
+package com.trading.security;
+
+import java.util.Collection;
+import java.util.Date;
+import java.util.HashSet;
+import java.util.Set;
+
+import javax.crypto.SecretKey;
+
+import org.springframework.security.core.Authentication;
+import org.springframework.security.core.GrantedAuthority;
+
+import com.trading.constants.JwtConstant;
+
+import io.jsonwebtoken.Claims;
+import io.jsonwebtoken.Jwts;
+import io.jsonwebtoken.security.Keys;
+
+public class JwtProvider {
+
+	static SecretKey key = Keys.hmacShaKeyFor(JwtConstant.SECRET_KEY.getBytes());
+
+	public static String generateToken(Authentication auth) {
+		Collection<? extends GrantedAuthority> authorities = auth.getAuthorities();
+		String roles = populateAuthorities(authorities);
+		return Jwts.builder()
+				.setIssuedAt(new Date())
+				.setExpiration(new Date(new Date().getTime()+86400000))
+				.claim("email", auth.getName())
+				.claim("authorities", roles)
+				.signWith(key)
+				.compact();
+	}
+	
+	public static String getEmailFromJwtToken(String jwt) {
+		jwt = jwt.substring(7);
+		Claims claims = Jwts.parserBuilder()
+				.setSigningKey(key)
+				.build()
+				.parseClaimsJws(jwt)
+				.getBody();
+		return String.valueOf(claims.get("email"));
+	}
+
+	public static String populateAuthorities(Collection<? extends GrantedAuthority> authorities) {
+		Set<String> auths = new HashSet<>();
+		for (GrantedAuthority authority : authorities) {
+			auths.add(authority.getAuthority());
+		}
+		return String.join(",", auths);
+	}
+}
\ No newline at end of file
diff --git a/src/main/java/com/trading/security/JwtTokenValidator.java b/src/main/java/com/trading/security/JwtTokenValidator.java
new file mode 100644
index 0000000..5002a9b
--- /dev/null
+++ b/src/main/java/com/trading/security/JwtTokenValidator.java
@@ -0,0 +1,69 @@
+package com.trading.security;
+
+import java.io.IOException;
+import java.util.List;
+
+import javax.crypto.SecretKey;
+
+import org.springframework.security.authentication.BadCredentialsException;
+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
+import org.springframework.security.core.Authentication;
+import org.springframework.security.core.GrantedAuthority;
+import org.springframework.security.core.authority.AuthorityUtils;
+import org.springframework.security.core.context.SecurityContextHolder;
+import org.springframework.web.filter.OncePerRequestFilter;
+
+import com.trading.constants.JwtConstant;
+
+import io.jsonwebtoken.Claims;
+import io.jsonwebtoken.Jwts;
+import io.jsonwebtoken.security.Keys;
+import jakarta.servlet.FilterChain;
+import jakarta.servlet.ServletException;
+import jakarta.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletResponse;
+
+public class JwtTokenValidator extends OncePerRequestFilter {
+
+	@Override
+	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
+			throws ServletException, IOException {
+
+		String jwt = request.getHeader(JwtConstant.JWT_HEADER);
+		if (null != jwt) {
+			jwt = jwt.substring(7);
+
+			try {
+				SecretKey secretKey = Keys.hmacShaKeyFor(JwtConstant.SECRET_KEY.getBytes());
+				System.out.println("JwtTokenValidator||secretKey:" + secretKey);
+				
+				Claims claims = Jwts.parserBuilder()
+								.setSigningKey(secretKey)
+								.build()
+								.parseClaimsJws(jwt)
+								.getBody();
+				System.out.println("JwtTokenValidator||claims:" + claims);
+
+				String email = String.valueOf(claims.get("email"));
+				System.out.println("JwtTokenValidator||email:" + email);
+
+				String authorities = String.valueOf(claims.get("authorities"));
+				System.out.println("JwtTokenValidator||authorities:" + authorities);
+				
+				List<GrantedAuthority> authoritiesList = AuthorityUtils.commaSeparatedStringToAuthorityList(authorities);
+				System.out.println("JwtTokenValidator||authoritiesList:" + authoritiesList);
+				
+				Authentication authentication = new UsernamePasswordAuthenticationToken(email, null, authoritiesList);
+				System.out.println("JwtTokenValidator||authentication:" + authentication);
+				
+				SecurityContextHolder.getContext().setAuthentication(authentication);
+				
+			} catch (Exception e) {
+				throw new BadCredentialsException("Invalid Token...");
+			}
+		}
+		
+		filterChain.doFilter(request, response);
+	}
+
+}
diff --git a/src/main/java/com/trading/service/CustomUserDetailsService.java b/src/main/java/com/trading/service/CustomUserDetailsService.java
new file mode 100644
index 0000000..b61509b
--- /dev/null
+++ b/src/main/java/com/trading/service/CustomUserDetailsService.java
@@ -0,0 +1,7 @@
+package com.trading.service;
+
+import org.springframework.security.core.userdetails.UserDetailsService;
+
+public interface CustomUserDetailsService  extends UserDetailsService {
+
+}
diff --git a/src/main/java/com/trading/service/impl/CustomUserDetailsServiceImpl.java b/src/main/java/com/trading/service/impl/CustomUserDetailsServiceImpl.java
new file mode 100644
index 0000000..ad2a7e0
--- /dev/null
+++ b/src/main/java/com/trading/service/impl/CustomUserDetailsServiceImpl.java
@@ -0,0 +1,36 @@
+package com.trading.service.impl;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.security.core.GrantedAuthority;
+import org.springframework.security.core.userdetails.UserDetails;
+import org.springframework.security.core.userdetails.UsernameNotFoundException;
+import org.springframework.stereotype.Service;
+
+import com.trading.modal.User;
+import com.trading.repository.UserRepository;
+import com.trading.service.CustomUserDetailsService;
+
+@Service
+public class CustomUserDetailsServiceImpl implements CustomUserDetailsService {
+
+	@Autowired
+	private UserRepository userRepository;
+
+	@Override
+	public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
+		User user = userRepository.findByEmail(email);
+		if (null == user) {
+			throw new UsernameNotFoundException(email);
+		}
+
+		List<GrantedAuthority> authorityList = new ArrayList<>();
+		return new org.springframework.security.core.userdetails.User(
+				user.getEmail(), 
+				user.getPassword(),
+				authorityList);
+	}
+
+}
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
new file mode 100644
index 0000000..d904d59
--- /dev/null
+++ b/src/main/resources/application.properties
@@ -0,0 +1,17 @@
+spring.application.name=trading-app
+server.port=8081
+
+# Database Configuration
+spring.datasource.url=jdbc:mysql://localhost:3306/trading_app
+spring.datasource.username=root
+spring.datasource.password=admin
+spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
+
+# JPA Configuration
+spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
+spring.jpa.hibernate.ddl-auto=update
+spring.jpa.show-sql=true
+spring.jpa.properties.hibernate.format_sql=true
+spring.jpa.properties.hibernate.use_sql_comments=true
+
+
diff --git a/src/test/java/com/trading/TradingAppApplicationTests.java b/src/test/java/com/trading/TradingAppApplicationTests.java
new file mode 100644
index 0000000..a7830a5
--- /dev/null
+++ b/src/test/java/com/trading/TradingAppApplicationTests.java
@@ -0,0 +1,13 @@
+package com.trading;
+
+import org.junit.jupiter.api.Test;
+import org.springframework.boot.test.context.SpringBootTest;
+
+@SpringBootTest
+class TradingAppApplicationTests {
+
+	@Test
+	void contextLoads() {
+	}
+
+}
-- 
2.41.0.windows.3

